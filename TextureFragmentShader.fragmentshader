#version 330 core
struct Light {
    vec3 direction;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 view_normal;
in vec3 fragpos;


// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform Light light;
uniform mat4 viewMat;

// Ouput data
layout(location = 0) out vec3 color;
layout(location = 1) out vec3 out_uv;
layout(location = 2) out vec3 out_view_normal;


void main(){
	// Output color = color of the texture at the specified UV
	color = texture( myTextureSampler, UV ).rgb;
	out_uv = vec3(UV,0);
	out_view_normal = normalize(view_normal);

    //PHONE light calculated in world space
    vec3 ambient  = light.ambient;

    vec3 view_light_direction = normalize((viewMat * vec4(light.direction, 0.0)).xyz);
    float diff = max(dot(out_view_normal,-view_light_direction),0);
    vec3 diffuse  = light.diffuse  * diff;  

    vec3 viewDir = -normalize(fragpos);
    vec3 halfwayDir = normalize(viewDir - view_light_direction);
    vec3 reflectDir = reflect(view_light_direction, out_view_normal);  
    float spec = pow(max(dot(halfwayDir, reflectDir), 0.0), 32);
    vec3 specular = light.specular * spec;

    color = (ambient + diffuse + specular) * color;

}