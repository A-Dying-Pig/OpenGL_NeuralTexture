#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertex_normal;


// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 view_normal;
out vec3 fragpos;
// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 viewMat;
uniform mat4 viewmodelMat;

void main(){	

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

	// The color of each vertex will be interpolated
	// to produce the color of each fragment
	UV = vertexUV;
	view_normal = (viewMat * vec4(vertex_normal, 0.0)).xyz;
	fragpos = (viewmodelMat * vec4(vertexPosition_modelspace,1)).xyz;
}

