#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertex_normal;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 view_normal;
out vec3 fragpos;
out mat4 viewMat;
out vec4 FragPosLightSpace;
// Values that stay constant for the whole mesh.
uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
uniform mat4 lightSpaceMatrix;

void main(){	

	mat4 VM = view * model;
	gl_Position =  projection * VM * vec4(vertexPosition_modelspace,1);

	UV = vertexUV;
	viewMat = transpose(inverse(VM));
	view_normal = (viewMat * vec4(vertex_normal, 0.0)).xyz;
	fragpos = (VM * vec4(vertexPosition_modelspace,1)).xyz;
	FragPosLightSpace = lightSpaceMatrix * vec4(vertexPosition_modelspace, 1.0);
}

